'' Checking te ordering / equality of items.
(defn geq (a b)
  (| (= a b) (> a b)))

(defn leq (a b)
  (| (= a b) (< a b)))

'' Checking if a list is empty.
(defn is-empty (list)
  (= 0 (len list)))

'' Dropping the first N elements of a list.
(defn drop (n list)
  (if (= n 0)
    list
    (drop (- n 1) (tail list))))

'' Taking the first n elements from a list.
(defn take (n list)
  (if (| (is-empty list) (= n 0))
    ()
    (+ ([] 0 list) (take (- n 1) (tail list)))))

'' Performing some function over each element in a list.
(defn map (fn list)
  (if (is-empty list)
    list
    (+ (fn (head list)) (map fn (tail list)))))

'' Performing a switch/case statement, but on solely boolean arguments. Finds
'' the first boolean that's true and executes the quote it's paired with.
(defn bool-switch (cases)
  (if (= 0 (len cases))
   (print "ala")
   (if ([] 0 ([] 0 cases))
     (exec ([] 1 ([] 0 cases)))
     (bool-switch (tail cases)))))
